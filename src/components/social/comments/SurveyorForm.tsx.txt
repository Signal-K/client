import { useEffect, useState } from "react";
import { useSupabaseClient, useSession } from "@supabase/auth-helpers-react";
import { SimplePostSingle } from "@/content/Posts/SimplePostSingle";

const ClassificationCommentForm = () => {
  const supabase = useSupabaseClient();
  const session = useSession();

  const [loading, setLoading] = useState(true);
  const [classifications, setClassifications] = useState([]);
  const [comments, setComments] = useState([]);
  const [commentInputs, setCommentInputs] = useState({});

  useEffect(() => {
    const fetchClassifications = async () => {
      try {
        const { data, error } = await supabase.from("classifications").select("*");
        if (error) throw new Error("Error fetching classifications: " + error.message);
        setClassifications(data || []);
      } catch (err) {
        console.error(err);
      }
    };

    const fetchComments = async () => {
      if (!session?.user?.id) return;
      try {
        const { data, error } = await supabase
          .from("comments")
          .select("id, content, configuration, classification_id, author")
          .eq("author", session.user.id);
        if (error) throw new Error("Error fetching comments: " + error.message);
        setComments(data || []);
      } catch (err) {
        console.error(err);
      }
    };

    const fetchData = async () => {
      setLoading(true);
      await Promise.all([fetchClassifications(), fetchComments()]);
      setLoading(false);
    };

    fetchData();
  }, [session, supabase]);

  const handleSubmitComment = async (classificationId) => {
    const commentInput = commentInputs[classificationId];
    if (!commentInput) {
      console.error("Comment input is required");
      return;
    }

    try {
      const { error } = await supabase.from("comments").insert([
        {
          content: commentInput,
          classification_id: classificationId,
          author: session?.user?.id,
          configuration: commentInput,
          surveyor: true,
        },
      ]);

      if (error) throw error;

      setCommentInputs((prev) => ({ ...prev, [classificationId]: "" }));
      console.log("Comment inserted successfully.");
    } catch (err) {
      console.error("Error inserting comment: ", err);
    }
  };

  const handleCommentInputChange = (classificationId, value) => {
    setCommentInputs((prev) => ({ ...prev, [classificationId]: value }));
  };

  if (loading) return <p>Loading...</p>;

  return (
    <div className="p-6 w-screen bg-card max-w-lg mx-auto rounded-lg shadow-sm">
      {classifications.length > 0 ? (
        <div className="space-y-8">
          {classifications.map((classification) => (
            <div key={classification.id} className="space-y-4">
              <SimplePostSingle
                id={classification.id.toString()}
                title={`Classification #${classification.id}`}
                author={classification.author || "Unknown"}
                content={classification.content || ""}
                category={classification.classificationtype || "General"}
              />
              <textarea
                value={commentInputs[classification.id] || ""}
                onChange={(e) => handleCommentInputChange(classification.id, e.target.value)}
                placeholder="Enter your comment"
                className="w-full p-2 border text-gray-500 border-gray-300 rounded"
              />
              <button
                className="bg-gray-500 text-white p-2 rounded"
                onClick={() => handleSubmitComment(classification.id)}
              >
                Submit Comment
              </button>
            </div>
          ))}
        </div>
      ) : (
        <p>No classifications found.</p>
      )}
    </div>
  );
};

export default ClassificationCommentForm;