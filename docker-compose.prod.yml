version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: navigation-postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-navigation}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data_prod:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Next.js Application (Production)
  nextapp:
    container_name: nextapp-prod
    build:
      context: ./
      dockerfile: Dockerfile.prod
      args:
        - DATABASE_URL=${DATABASE_URL}
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}
      - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost:3000}
      # Add other production environment variables
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    restart: unless-stopped
    # Run migrations before starting the app
    command: >
      sh -c "
        echo 'Running database migrations...' &&
        yarn db:push &&
        echo 'Starting production application...' &&
        node server.js
      "

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - nextapp
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - proxy

volumes:
  postgres_data_prod:

networks:
  app-network:
    driver: bridge
